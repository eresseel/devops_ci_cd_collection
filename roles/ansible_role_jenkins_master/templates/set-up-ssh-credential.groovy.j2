#!groovy
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource
import com.cloudbees.plugins.credentials.Credentials
import com.cloudbees.plugins.credentials.CredentialsProvider
import com.cloudbees.plugins.credentials.SystemCredentialsProvider
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.plugins.credentials.CredentialsScope
import jenkins.model.Jenkins

def id = "{{ item.id }}"
def userName = "{{ item.username }}"
def filePath = "{{ file_path }}"

def addSshCredential(String id, String username, String privateKeyFile) {
  def privateKey = new FileOnMasterPrivateKeySource(privateKeyFile)
  def credential = new BasicSSHUserPrivateKey(CredentialsScope.GLOBAL, id, username, privateKey, null, null)

  def credentialList = CredentialsProvider.lookupCredentials(
    BasicSSHUserPrivateKey.class,
    Jenkins.instance
  )

  def existingCredentials = credentialList.find {
    it.id == id && it.username == username && it.privateKey == privateKey
  }

  if (existingCredentials) {
    def currentPrivateKey = new FileOnMasterPrivateKeySource(existingCredentials.privateKey)
    def currentCredential = new BasicSSHUserPrivateKey(
      CredentialsScope.GLOBAL,
      existingCredentials.id,
      existingCredentials.username,
      currentPrivateKey,
      null,
      null
    )

    if (existingCredentials != currentCredential) {
      SystemCredentialsProvider.getInstance().getStore().updateCredentials(Domain.global(), currentCredential, credential)
      println "Changed SSH credentials"
    }
  } else {
    SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), credential)
    println "Changed SSH credentials"
  }
}

addSshCredential(id, userName, filePath)